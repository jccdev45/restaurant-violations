/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RootLayoutImport } from './routes/_rootLayout'
import { Route as RootLayoutIndexImport } from './routes/_rootLayout/index'
import { Route as RootLayoutRestaurantsRouteImport } from './routes/_rootLayout/restaurants/route'
import { Route as RootLayoutRestaurantsIndexImport } from './routes/_rootLayout/restaurants/index'
import { Route as RootLayoutRestaurantsMapImport } from './routes/_rootLayout/restaurants/map'
import { Route as RootLayoutRestaurantsChartImport } from './routes/_rootLayout/restaurants/chart'
import { Route as RootLayoutRestaurantsCamisIndexImport } from './routes/_rootLayout/restaurants/$camis/index'
import { Route as RootLayoutRestaurantsCamisInspectionsIndexImport } from './routes/_rootLayout/restaurants/$camis/inspections/index'
import { Route as RootLayoutRestaurantsCamisInspectionsInspectionIdIndexImport } from './routes/_rootLayout/restaurants/$camis/inspections/$inspectionId/index'

// Create/Update Routes

const RootLayoutRoute = RootLayoutImport.update({
  id: '/_rootLayout',
  getParentRoute: () => rootRoute,
} as any)

const RootLayoutIndexRoute = RootLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootLayoutRoute,
} as any)

const RootLayoutRestaurantsRouteRoute = RootLayoutRestaurantsRouteImport.update(
  {
    id: '/restaurants',
    path: '/restaurants',
    getParentRoute: () => RootLayoutRoute,
  } as any,
)

const RootLayoutRestaurantsIndexRoute = RootLayoutRestaurantsIndexImport.update(
  {
    id: '/',
    path: '/',
    getParentRoute: () => RootLayoutRestaurantsRouteRoute,
  } as any,
)

const RootLayoutRestaurantsMapRoute = RootLayoutRestaurantsMapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => RootLayoutRestaurantsRouteRoute,
} as any)

const RootLayoutRestaurantsChartRoute = RootLayoutRestaurantsChartImport.update(
  {
    id: '/chart',
    path: '/chart',
    getParentRoute: () => RootLayoutRestaurantsRouteRoute,
  } as any,
)

const RootLayoutRestaurantsCamisIndexRoute =
  RootLayoutRestaurantsCamisIndexImport.update({
    id: '/$camis/',
    path: '/$camis/',
    getParentRoute: () => RootLayoutRestaurantsRouteRoute,
  } as any)

const RootLayoutRestaurantsCamisInspectionsIndexRoute =
  RootLayoutRestaurantsCamisInspectionsIndexImport.update({
    id: '/$camis/inspections/',
    path: '/$camis/inspections/',
    getParentRoute: () => RootLayoutRestaurantsRouteRoute,
  } as any)

const RootLayoutRestaurantsCamisInspectionsInspectionIdIndexRoute =
  RootLayoutRestaurantsCamisInspectionsInspectionIdIndexImport.update({
    id: '/$camis/inspections/$inspectionId/',
    path: '/$camis/inspections/$inspectionId/',
    getParentRoute: () => RootLayoutRestaurantsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_rootLayout': {
      id: '/_rootLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof RootLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_rootLayout/restaurants': {
      id: '/_rootLayout/restaurants'
      path: '/restaurants'
      fullPath: '/restaurants'
      preLoaderRoute: typeof RootLayoutRestaurantsRouteImport
      parentRoute: typeof RootLayoutImport
    }
    '/_rootLayout/': {
      id: '/_rootLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RootLayoutIndexImport
      parentRoute: typeof RootLayoutImport
    }
    '/_rootLayout/restaurants/chart': {
      id: '/_rootLayout/restaurants/chart'
      path: '/chart'
      fullPath: '/restaurants/chart'
      preLoaderRoute: typeof RootLayoutRestaurantsChartImport
      parentRoute: typeof RootLayoutRestaurantsRouteImport
    }
    '/_rootLayout/restaurants/map': {
      id: '/_rootLayout/restaurants/map'
      path: '/map'
      fullPath: '/restaurants/map'
      preLoaderRoute: typeof RootLayoutRestaurantsMapImport
      parentRoute: typeof RootLayoutRestaurantsRouteImport
    }
    '/_rootLayout/restaurants/': {
      id: '/_rootLayout/restaurants/'
      path: '/'
      fullPath: '/restaurants/'
      preLoaderRoute: typeof RootLayoutRestaurantsIndexImport
      parentRoute: typeof RootLayoutRestaurantsRouteImport
    }
    '/_rootLayout/restaurants/$camis/': {
      id: '/_rootLayout/restaurants/$camis/'
      path: '/$camis'
      fullPath: '/restaurants/$camis'
      preLoaderRoute: typeof RootLayoutRestaurantsCamisIndexImport
      parentRoute: typeof RootLayoutRestaurantsRouteImport
    }
    '/_rootLayout/restaurants/$camis/inspections/': {
      id: '/_rootLayout/restaurants/$camis/inspections/'
      path: '/$camis/inspections'
      fullPath: '/restaurants/$camis/inspections'
      preLoaderRoute: typeof RootLayoutRestaurantsCamisInspectionsIndexImport
      parentRoute: typeof RootLayoutRestaurantsRouteImport
    }
    '/_rootLayout/restaurants/$camis/inspections/$inspectionId/': {
      id: '/_rootLayout/restaurants/$camis/inspections/$inspectionId/'
      path: '/$camis/inspections/$inspectionId'
      fullPath: '/restaurants/$camis/inspections/$inspectionId'
      preLoaderRoute: typeof RootLayoutRestaurantsCamisInspectionsInspectionIdIndexImport
      parentRoute: typeof RootLayoutRestaurantsRouteImport
    }
  }
}

// Create and export the route tree

interface RootLayoutRestaurantsRouteRouteChildren {
  RootLayoutRestaurantsChartRoute: typeof RootLayoutRestaurantsChartRoute
  RootLayoutRestaurantsMapRoute: typeof RootLayoutRestaurantsMapRoute
  RootLayoutRestaurantsIndexRoute: typeof RootLayoutRestaurantsIndexRoute
  RootLayoutRestaurantsCamisIndexRoute: typeof RootLayoutRestaurantsCamisIndexRoute
  RootLayoutRestaurantsCamisInspectionsIndexRoute: typeof RootLayoutRestaurantsCamisInspectionsIndexRoute
  RootLayoutRestaurantsCamisInspectionsInspectionIdIndexRoute: typeof RootLayoutRestaurantsCamisInspectionsInspectionIdIndexRoute
}

const RootLayoutRestaurantsRouteRouteChildren: RootLayoutRestaurantsRouteRouteChildren =
  {
    RootLayoutRestaurantsChartRoute: RootLayoutRestaurantsChartRoute,
    RootLayoutRestaurantsMapRoute: RootLayoutRestaurantsMapRoute,
    RootLayoutRestaurantsIndexRoute: RootLayoutRestaurantsIndexRoute,
    RootLayoutRestaurantsCamisIndexRoute: RootLayoutRestaurantsCamisIndexRoute,
    RootLayoutRestaurantsCamisInspectionsIndexRoute:
      RootLayoutRestaurantsCamisInspectionsIndexRoute,
    RootLayoutRestaurantsCamisInspectionsInspectionIdIndexRoute:
      RootLayoutRestaurantsCamisInspectionsInspectionIdIndexRoute,
  }

const RootLayoutRestaurantsRouteRouteWithChildren =
  RootLayoutRestaurantsRouteRoute._addFileChildren(
    RootLayoutRestaurantsRouteRouteChildren,
  )

interface RootLayoutRouteChildren {
  RootLayoutRestaurantsRouteRoute: typeof RootLayoutRestaurantsRouteRouteWithChildren
  RootLayoutIndexRoute: typeof RootLayoutIndexRoute
}

const RootLayoutRouteChildren: RootLayoutRouteChildren = {
  RootLayoutRestaurantsRouteRoute: RootLayoutRestaurantsRouteRouteWithChildren,
  RootLayoutIndexRoute: RootLayoutIndexRoute,
}

const RootLayoutRouteWithChildren = RootLayoutRoute._addFileChildren(
  RootLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof RootLayoutRouteWithChildren
  '/restaurants': typeof RootLayoutRestaurantsRouteRouteWithChildren
  '/': typeof RootLayoutIndexRoute
  '/restaurants/chart': typeof RootLayoutRestaurantsChartRoute
  '/restaurants/map': typeof RootLayoutRestaurantsMapRoute
  '/restaurants/': typeof RootLayoutRestaurantsIndexRoute
  '/restaurants/$camis': typeof RootLayoutRestaurantsCamisIndexRoute
  '/restaurants/$camis/inspections': typeof RootLayoutRestaurantsCamisInspectionsIndexRoute
  '/restaurants/$camis/inspections/$inspectionId': typeof RootLayoutRestaurantsCamisInspectionsInspectionIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof RootLayoutIndexRoute
  '/restaurants/chart': typeof RootLayoutRestaurantsChartRoute
  '/restaurants/map': typeof RootLayoutRestaurantsMapRoute
  '/restaurants': typeof RootLayoutRestaurantsIndexRoute
  '/restaurants/$camis': typeof RootLayoutRestaurantsCamisIndexRoute
  '/restaurants/$camis/inspections': typeof RootLayoutRestaurantsCamisInspectionsIndexRoute
  '/restaurants/$camis/inspections/$inspectionId': typeof RootLayoutRestaurantsCamisInspectionsInspectionIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_rootLayout': typeof RootLayoutRouteWithChildren
  '/_rootLayout/restaurants': typeof RootLayoutRestaurantsRouteRouteWithChildren
  '/_rootLayout/': typeof RootLayoutIndexRoute
  '/_rootLayout/restaurants/chart': typeof RootLayoutRestaurantsChartRoute
  '/_rootLayout/restaurants/map': typeof RootLayoutRestaurantsMapRoute
  '/_rootLayout/restaurants/': typeof RootLayoutRestaurantsIndexRoute
  '/_rootLayout/restaurants/$camis/': typeof RootLayoutRestaurantsCamisIndexRoute
  '/_rootLayout/restaurants/$camis/inspections/': typeof RootLayoutRestaurantsCamisInspectionsIndexRoute
  '/_rootLayout/restaurants/$camis/inspections/$inspectionId/': typeof RootLayoutRestaurantsCamisInspectionsInspectionIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/restaurants'
    | '/'
    | '/restaurants/chart'
    | '/restaurants/map'
    | '/restaurants/'
    | '/restaurants/$camis'
    | '/restaurants/$camis/inspections'
    | '/restaurants/$camis/inspections/$inspectionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/restaurants/chart'
    | '/restaurants/map'
    | '/restaurants'
    | '/restaurants/$camis'
    | '/restaurants/$camis/inspections'
    | '/restaurants/$camis/inspections/$inspectionId'
  id:
    | '__root__'
    | '/_rootLayout'
    | '/_rootLayout/restaurants'
    | '/_rootLayout/'
    | '/_rootLayout/restaurants/chart'
    | '/_rootLayout/restaurants/map'
    | '/_rootLayout/restaurants/'
    | '/_rootLayout/restaurants/$camis/'
    | '/_rootLayout/restaurants/$camis/inspections/'
    | '/_rootLayout/restaurants/$camis/inspections/$inspectionId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  RootLayoutRoute: typeof RootLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  RootLayoutRoute: RootLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_rootLayout"
      ]
    },
    "/_rootLayout": {
      "filePath": "_rootLayout.tsx",
      "children": [
        "/_rootLayout/restaurants",
        "/_rootLayout/"
      ]
    },
    "/_rootLayout/restaurants": {
      "filePath": "_rootLayout/restaurants/route.tsx",
      "parent": "/_rootLayout",
      "children": [
        "/_rootLayout/restaurants/chart",
        "/_rootLayout/restaurants/map",
        "/_rootLayout/restaurants/",
        "/_rootLayout/restaurants/$camis/",
        "/_rootLayout/restaurants/$camis/inspections/",
        "/_rootLayout/restaurants/$camis/inspections/$inspectionId/"
      ]
    },
    "/_rootLayout/": {
      "filePath": "_rootLayout/index.tsx",
      "parent": "/_rootLayout"
    },
    "/_rootLayout/restaurants/chart": {
      "filePath": "_rootLayout/restaurants/chart.tsx",
      "parent": "/_rootLayout/restaurants"
    },
    "/_rootLayout/restaurants/map": {
      "filePath": "_rootLayout/restaurants/map.tsx",
      "parent": "/_rootLayout/restaurants"
    },
    "/_rootLayout/restaurants/": {
      "filePath": "_rootLayout/restaurants/index.tsx",
      "parent": "/_rootLayout/restaurants"
    },
    "/_rootLayout/restaurants/$camis/": {
      "filePath": "_rootLayout/restaurants/$camis/index.tsx",
      "parent": "/_rootLayout/restaurants"
    },
    "/_rootLayout/restaurants/$camis/inspections/": {
      "filePath": "_rootLayout/restaurants/$camis/inspections/index.tsx",
      "parent": "/_rootLayout/restaurants"
    },
    "/_rootLayout/restaurants/$camis/inspections/$inspectionId/": {
      "filePath": "_rootLayout/restaurants/$camis/inspections/$inspectionId/index.tsx",
      "parent": "/_rootLayout/restaurants"
    }
  }
}
ROUTE_MANIFEST_END */
